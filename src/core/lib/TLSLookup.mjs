/**
 * Contains lookup functions for TLS constants
 *
 * @author c65722 []
 * @copyright Crown Copyright 2019
 * @license Apache-2.0
 */

/**
 * Takes a number representing a cipher suite registered with IANA, and returns
 * its corresponding discription
 * @param {number} input IANA Identifier
 * @return {string} String containing description of cipher suite
 */
export function cipherSuiteLookup(input) {
    switch (input) {
        case 0x0000:
            return "TLS_NULL_WITH_NULL_NULL";
        case 0x0001:
            return "TLS_RSA_WITH_NULL_MD5";
        case 0x0002:
            return "TLS_RSA_WITH_NULL_SHA";
        case 0x0003:
            return "TLS_RSA_EXPORT_WITH_RC4_40_MD5";
        case 0x0004:
            return "TLS_RSA_WITH_RC4_128_MD5";
        case 0x0005:
            return "TLS_RSA_WITH_RC4_128_SHA";
        case 0x0006:
            return "TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5";
        case 0x0007:
            return "TLS_RSA_WITH_IDEA_CBC_SHA";
        case 0x0008:
            return "TLS_RSA_EXPORT_WITH_DES40_CBC_SHA";
        case 0x0009:
            return "TLS_RSA_WITH_DES_CBC_SHA";
        case 0x000A:
            return "TLS_RSA_WITH_3DES_EDE_CBC_SHA";
        case 0x000B:
            return "TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA";
        case 0x000C:
            return "TLS_DH_DSS_WITH_DES_CBC_SHA";
        case 0x000D:
            return "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA";
        case 0x000E:
            return "TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA";
        case 0x000F:
            return "TLS_DH_RSA_WITH_DES_CBC_SHA";
        case 0x0010:
            return "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA";
        case 0x0011:
            return "TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA";
        case 0x0012:
            return "TLS_DHE_DSS_WITH_DES_CBC_SHA";
        case 0x0013:
            return "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA";
        case 0x0014:
            return "TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA";
        case 0x0015:
            return "TLS_DHE_RSA_WITH_DES_CBC_SHA";
        case 0x0016:
            return "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA";
        case 0x0017:
            return "TLS_DH_anon_EXPORT_WITH_RC4_40_MD5";
        case 0x0018:
            return "TLS_DH_anon_WITH_RC4_128_MD5";
        case 0x0019:
            return "TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA";
        case 0x001A:
            return "TLS_DH_anon_WITH_DES_CBC_SHA";
        case 0x001B:
            return "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA";
        case 0x001E:
            return "TLS_KRB5_WITH_DES_CBC_SHA";
        case 0x001F:
            return "TLS_KRB5_WITH_3DES_EDE_CBC_SHA";
        case 0x0020:
            return "TLS_KRB5_WITH_RC4_128_SHA";
        case 0x0021:
            return "TLS_KRB5_WITH_IDEA_CBC_SHA";
        case 0x0022:
            return "TLS_KRB5_WITH_DES_CBC_MD5";
        case 0x0023:
            return "TLS_KRB5_WITH_3DES_EDE_CBC_MD5";
        case 0x0024:
            return "TLS_KRB5_WITH_RC4_128_MD5";
        case 0x0025:
            return "TLS_KRB5_WITH_IDEA_CBC_MD5";
        case 0x0026:
            return "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA";
        case 0x0027:
            return "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA";
        case 0x0028:
            return "TLS_KRB5_EXPORT_WITH_RC4_40_SHA";
        case 0x0029:
            return "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5";
        case 0x002A:
            return "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5";
        case 0x002B:
            return "TLS_KRB5_EXPORT_WITH_RC4_40_MD5";
        case 0x002C:
            return "TLS_PSK_WITH_NULL_SHA";
        case 0x002D:
            return "TLS_DHE_PSK_WITH_NULL_SHA";
        case 0x002E:
            return "TLS_RSA_PSK_WITH_NULL_SHA";
        case 0x002F:
            return "TLS_RSA_WITH_AES_128_CBC_SHA";
        case 0x0030:
            return "TLS_DH_DSS_WITH_AES_128_CBC_SHA";
        case 0x0031:
            return "TLS_DH_RSA_WITH_AES_128_CBC_SHA";
        case 0x0032:
            return "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";
        case 0x0033:
            return "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";
        case 0x0034:
            return "TLS_DH_anon_WITH_AES_128_CBC_SHA";
        case 0x0035:
            return "TLS_RSA_WITH_AES_256_CBC_SHA";
        case 0x0036:
            return "TLS_DH_DSS_WITH_AES_256_CBC_SHA";
        case 0x0037:
            return "TLS_DH_RSA_WITH_AES_256_CBC_SHA";
        case 0x0038:
            return "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";
        case 0x0039:
            return "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";
        case 0x003A:
            return "TLS_DH_anon_WITH_AES_256_CBC_SHA";
        case 0x003B:
            return "TLS_RSA_WITH_NULL_SHA256";
        case 0x003C:
            return "TLS_RSA_WITH_AES_128_CBC_SHA256";
        case 0x003D:
            return "TLS_RSA_WITH_AES_256_CBC_SHA256";
        case 0x003E:
            return "TLS_DH_DSS_WITH_AES_128_CBC_SHA256";
        case 0x003F:
            return "TLS_DH_RSA_WITH_AES_128_CBC_SHA256";
        case 0x0040:
            return "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256";
        case 0x0041:
            return "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA";
        case 0x0042:
            return "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA";
        case 0x0043:
            return "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA";
        case 0x0044:
            return "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA";
        case 0x0045:
            return "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA";
        case 0x0046:
            return "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA";
        case 0x0067:
            return "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256";
        case 0x0068:
            return "TLS_DH_DSS_WITH_AES_256_CBC_SHA256";
        case 0x0069:
            return "TLS_DH_RSA_WITH_AES_256_CBC_SHA256";
        case 0x006A:
            return "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256";
        case 0x006B:
            return "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256";
        case 0x006C:
            return "TLS_DH_anon_WITH_AES_128_CBC_SHA256";
        case 0x006D:
            return "TLS_DH_anon_WITH_AES_256_CBC_SHA256";
        case 0x0084:
            return "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA";
        case 0x0085:
            return "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA";
        case 0x0086:
            return "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA";
        case 0x0087:
            return "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA";
        case 0x0088:
            return "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA";
        case 0x0089:
            return "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA";
        case 0x008A:
            return "TLS_PSK_WITH_RC4_128_SHA";
        case 0x008B:
            return "TLS_PSK_WITH_3DES_EDE_CBC_SHA";
        case 0x008C:
            return "TLS_PSK_WITH_AES_128_CBC_SHA";
        case 0x008D:
            return "TLS_PSK_WITH_AES_256_CBC_SHA";
        case 0x008E:
            return "TLS_DHE_PSK_WITH_RC4_128_SHA";
        case 0x008F:
            return "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA";
        case 0x0090:
            return "TLS_DHE_PSK_WITH_AES_128_CBC_SHA";
        case 0x0091:
            return "TLS_DHE_PSK_WITH_AES_256_CBC_SHA";
        case 0x0092:
            return "TLS_RSA_PSK_WITH_RC4_128_SHA";
        case 0x0093:
            return "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA";
        case 0x0094:
            return "TLS_RSA_PSK_WITH_AES_128_CBC_SHA";
        case 0x0095:
            return "TLS_RSA_PSK_WITH_AES_256_CBC_SHA";
        case 0x0096:
            return "TLS_RSA_WITH_SEED_CBC_SHA";
        case 0x0097:
            return "TLS_DH_DSS_WITH_SEED_CBC_SHA";
        case 0x0098:
            return "TLS_DH_RSA_WITH_SEED_CBC_SHA";
        case 0x0099:
            return "TLS_DHE_DSS_WITH_SEED_CBC_SHA";
        case 0x009A:
            return "TLS_DHE_RSA_WITH_SEED_CBC_SHA";
        case 0x009B:
            return "TLS_DH_anon_WITH_SEED_CBC_SHA";
        case 0x009C:
            return "TLS_RSA_WITH_AES_128_GCM_SHA256";
        case 0x009D:
            return "TLS_RSA_WITH_AES_256_GCM_SHA384";
        case 0x009E:
            return "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";
        case 0x009F:
            return "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";
        case 0x00A0:
            return "TLS_DH_RSA_WITH_AES_128_GCM_SHA256";
        case 0x00A1:
            return "TLS_DH_RSA_WITH_AES_256_GCM_SHA384";
        case 0x00A2:
            return "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256";
        case 0x00A3:
            return "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384";
        case 0x00A4:
            return "TLS_DH_DSS_WITH_AES_128_GCM_SHA256";
        case 0x00A5:
            return "TLS_DH_DSS_WITH_AES_256_GCM_SHA384";
        case 0x00A6:
            return "TLS_DH_anon_WITH_AES_128_GCM_SHA256";
        case 0x00A7:
            return "TLS_DH_anon_WITH_AES_256_GCM_SHA384";
        case 0x00A8:
            return "TLS_PSK_WITH_AES_128_GCM_SHA256";
        case 0x00A9:
            return "TLS_PSK_WITH_AES_256_GCM_SHA384";
        case 0x00AA:
            return "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256";
        case 0x00AB:
            return "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384";
        case 0x00AC:
            return "TLS_RSA_PSK_WITH_AES_128_GCM_SHA256";
        case 0x00AD:
            return "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384";
        case 0x00AE:
            return "TLS_PSK_WITH_AES_128_CBC_SHA256";
        case 0x00AF:
            return "TLS_PSK_WITH_AES_256_CBC_SHA384";
        case 0x00B0:
            return "TLS_PSK_WITH_NULL_SHA256";
        case 0x00B1:
            return "TLS_PSK_WITH_NULL_SHA384";
        case 0x00B2:
            return "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256";
        case 0x00B3:
            return "TLS_DHE_PSK_WITH_AES_256_CBC_SHA384";
        case 0x00B4:
            return "TLS_DHE_PSK_WITH_NULL_SHA256";
        case 0x00B5:
            return "TLS_DHE_PSK_WITH_NULL_SHA384";
        case 0x00B6:
            return "TLS_RSA_PSK_WITH_AES_128_CBC_SHA256";
        case 0x00B7:
            return "TLS_RSA_PSK_WITH_AES_256_CBC_SHA384";
        case 0x00B8:
            return "TLS_RSA_PSK_WITH_NULL_SHA256";
        case 0x00B9:
            return "TLS_RSA_PSK_WITH_NULL_SHA384";
        case 0x00BA:
            return "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256";
        case 0x00BB:
            return "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256";
        case 0x00BC:
            return "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256";
        case 0x00BD:
            return "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256";
        case 0x00BE:
            return "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256";
        case 0x00BF:
            return "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256";
        case 0x00C0:
            return "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256";
        case 0x00C1:
            return "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256";
        case 0x00C2:
            return "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256";
        case 0x00C3:
            return "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256";
        case 0x00C4:
            return "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256";
        case 0x00C5:
            return "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256";
        case 0x00FF:
            return "TLS_EMPTY_RENEGOTIATION_INFO_SCSV";
        case 0x1301:
            return "TLS_AES_128_GCM_SHA256";
        case 0x1302:
            return "TLS_AES_256_GCM_SHA384";
        case 0x1303:
            return "TLS_CHACHA20_POLY1305_SHA256";
        case 0x1304:
            return "TLS_AES_128_CCM_SHA256";
        case 0x1305:
            return "TLS_AES_128_CCM_8_SHA256";
        case 0x5600:
            return "TLS_FALLBACK_SCSV";
        case 0xC001:
            return "TLS_ECDH_ECDSA_WITH_NULL_SHA";
        case 0xC002:
            return "TLS_ECDH_ECDSA_WITH_RC4_128_SHA";
        case 0xC003:
            return "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA";
        case 0xC004:
            return "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA";
        case 0xC005:
            return "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA";
        case 0xC006:
            return "TLS_ECDHE_ECDSA_WITH_NULL_SHA";
        case 0xC007:
            return "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA";
        case 0xC008:
            return "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA";
        case 0xC009:
            return "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";
        case 0xC00A:
            return "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";
        case 0xC00B:
            return "TLS_ECDH_RSA_WITH_NULL_SHA";
        case 0xC00C:
            return "TLS_ECDH_RSA_WITH_RC4_128_SHA";
        case 0xC00D:
            return "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA";
        case 0xC00E:
            return "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA";
        case 0xC00F:
            return "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA";
        case 0xC010:
            return "TLS_ECDHE_RSA_WITH_NULL_SHA";
        case 0xC011:
            return "TLS_ECDHE_RSA_WITH_RC4_128_SHA";
        case 0xC012:
            return "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA";
        case 0xC013:
            return "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
        case 0xC014:
            return "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
        case 0xC015:
            return "TLS_ECDH_anon_WITH_NULL_SHA";
        case 0xC016:
            return "TLS_ECDH_anon_WITH_RC4_128_SHA";
        case 0xC017:
            return "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA";
        case 0xC018:
            return "TLS_ECDH_anon_WITH_AES_128_CBC_SHA";
        case 0xC019:
            return "TLS_ECDH_anon_WITH_AES_256_CBC_SHA";
        case 0xC01A:
            return "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA";
        case 0xC01B:
            return "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA";
        case 0xC01C:
            return "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA";
        case 0xC01D:
            return "TLS_SRP_SHA_WITH_AES_128_CBC_SHA";
        case 0xC01E:
            return "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA";
        case 0xC01F:
            return "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA";
        case 0xC020:
            return "TLS_SRP_SHA_WITH_AES_256_CBC_SHA";
        case 0xC021:
            return "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA";
        case 0xC022:
            return "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA";
        case 0xC023:
            return "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
        case 0xC024:
            return "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384";
        case 0xC025:
            return "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256";
        case 0xC026:
            return "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384";
        case 0xC027:
            return "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
        case 0xC028:
            return "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
        case 0xC029:
            return "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256";
        case 0xC02A:
            return "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384";
        case 0xC02B:
            return "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
        case 0xC02C:
            return "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
        case 0xC02D:
            return "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256";
        case 0xC02E:
            return "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384";
        case 0xC02F:
            return "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
        case 0xC030:
            return "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
        case 0xC031:
            return "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256";
        case 0xC032:
            return "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384";
        case 0xC033:
            return "TLS_ECDHE_PSK_WITH_RC4_128_SHA";
        case 0xC034:
            return "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA";
        case 0xC035:
            return "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA";
        case 0xC036:
            return "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA";
        case 0xC037:
            return "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256";
        case 0xC038:
            return "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384";
        case 0xC039:
            return "TLS_ECDHE_PSK_WITH_NULL_SHA";
        case 0xC03A:
            return "TLS_ECDHE_PSK_WITH_NULL_SHA256";
        case 0xC03B:
            return "TLS_ECDHE_PSK_WITH_NULL_SHA384";
        case 0xC03C:
            return "TLS_RSA_WITH_ARIA_128_CBC_SHA256";
        case 0xC03D:
            return "TLS_RSA_WITH_ARIA_256_CBC_SHA384";
        case 0xC03E:
            return "TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256";
        case 0xC03F:
            return "TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384";
        case 0xC040:
            return "TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256";
        case 0xC041:
            return "TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384";
        case 0xC042:
            return "TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256";
        case 0xC043:
            return "TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384";
        case 0xC044:
            return "TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256";
        case 0xC045:
            return "TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384";
        case 0xC046:
            return "TLS_DH_anon_WITH_ARIA_128_CBC_SHA256";
        case 0xC047:
            return "TLS_DH_anon_WITH_ARIA_256_CBC_SHA384";
        case 0xC048:
            return "TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256";
        case 0xC049:
            return "TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384";
        case 0xC04A:
            return "TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256";
        case 0xC04B:
            return "TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384";
        case 0xC04C:
            return "TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256";
        case 0xC04D:
            return "TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384";
        case 0xC04E:
            return "TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256";
        case 0xC04F:
            return "TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384";
        case 0xC050:
            return "TLS_RSA_WITH_ARIA_128_GCM_SHA256";
        case 0xC051:
            return "TLS_RSA_WITH_ARIA_256_GCM_SHA384";
        case 0xC052:
            return "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256";
        case 0xC053:
            return "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384";
        case 0xC054:
            return "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256";
        case 0xC055:
            return "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384";
        case 0xC056:
            return "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256";
        case 0xC057:
            return "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384";
        case 0xC058:
            return "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256";
        case 0xC059:
            return "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384";
        case 0xC05A:
            return "TLS_DH_anon_WITH_ARIA_128_GCM_SHA256";
        case 0xC05B:
            return "TLS_DH_anon_WITH_ARIA_256_GCM_SHA384";
        case 0xC05C:
            return "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256";
        case 0xC05D:
            return "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384";
        case 0xC05E:
            return "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256";
        case 0xC05F:
            return "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384";
        case 0xC060:
            return "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256";
        case 0xC061:
            return "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384";
        case 0xC062:
            return "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256";
        case 0xC063:
            return "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384";
        case 0xC064:
            return "TLS_PSK_WITH_ARIA_128_CBC_SHA256";
        case 0xC065:
            return "TLS_PSK_WITH_ARIA_256_CBC_SHA384";
        case 0xC066:
            return "TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256";
        case 0xC067:
            return "TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384";
        case 0xC068:
            return "TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256";
        case 0xC069:
            return "TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384";
        case 0xC06A:
            return "TLS_PSK_WITH_ARIA_128_GCM_SHA256";
        case 0xC06B:
            return "TLS_PSK_WITH_ARIA_256_GCM_SHA384";
        case 0xC06C:
            return "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256";
        case 0xC06D:
            return "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384";
        case 0xC06E:
            return "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256";
        case 0xC06F:
            return "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384";
        case 0xC070:
            return "TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256";
        case 0xC071:
            return "TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384";
        case 0xC072:
            return "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256";
        case 0xC073:
            return "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384";
        case 0xC074:
            return "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256";
        case 0xC075:
            return "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384";
        case 0xC076:
            return "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256";
        case 0xC077:
            return "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384";
        case 0xC078:
            return "TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256";
        case 0xC079:
            return "TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384";
        case 0xC07A:
            return "TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC07B:
            return "TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC07C:
            return "TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC07D:
            return "TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC07E:
            return "TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC07F:
            return "TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC080:
            return "TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC081:
            return "TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC082:
            return "TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC083:
            return "TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC084:
            return "TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC085:
            return "TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC086:
            return "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC087:
            return "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC088:
            return "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC089:
            return "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC08A:
            return "TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC08B:
            return "TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC08C:
            return "TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC08D:
            return "TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC08E:
            return "TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC08F:
            return "TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC090:
            return "TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC091:
            return "TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC092:
            return "TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256";
        case 0xC093:
            return "TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384";
        case 0xC094:
            return "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256";
        case 0xC095:
            return "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384";
        case 0xC096:
            return "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256";
        case 0xC097:
            return "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384";
        case 0xC098:
            return "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256";
        case 0xC099:
            return "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384";
        case 0xC09A:
            return "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256";
        case 0xC09B:
            return "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384";
        case 0xC09C:
            return "TLS_RSA_WITH_AES_128_CCM";
        case 0xC09D:
            return "TLS_RSA_WITH_AES_256_CCM";
        case 0xC09E:
            return "TLS_DHE_RSA_WITH_AES_128_CCM";
        case 0xC09F:
            return "TLS_DHE_RSA_WITH_AES_256_CCM";
        case 0xC0A0:
            return "TLS_RSA_WITH_AES_128_CCM_8";
        case 0xC0A1:
            return "TLS_RSA_WITH_AES_256_CCM_8";
        case 0xC0A2:
            return "TLS_DHE_RSA_WITH_AES_128_CCM_8";
        case 0xC0A3:
            return "TLS_DHE_RSA_WITH_AES_256_CCM_8";
        case 0xC0A4:
            return "TLS_PSK_WITH_AES_128_CCM";
        case 0xC0A5:
            return "TLS_PSK_WITH_AES_256_CCM";
        case 0xC0A6:
            return "TLS_DHE_PSK_WITH_AES_128_CCM";
        case 0xC0A7:
            return "TLS_DHE_PSK_WITH_AES_256_CCM";
        case 0xC0A8:
            return "TLS_PSK_WITH_AES_128_CCM_8";
        case 0xC0A9:
            return "TLS_PSK_WITH_AES_256_CCM_8";
        case 0xC0AA:
            return "TLS_PSK_DHE_WITH_AES_128_CCM_8";
        case 0xC0AB:
            return "TLS_PSK_DHE_WITH_AES_256_CCM_8";
        case 0xC0AC:
            return "TLS_ECDHE_ECDSA_WITH_AES_128_CCM";
        case 0xC0AD:
            return "TLS_ECDHE_ECDSA_WITH_AES_256_CCM";
        case 0xC0AE:
            return "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8";
        case 0xC0AF:
            return "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8";
        case 0xC0B0:
            return "TLS_ECCPWD_WITH_AES_128_GCM_SHA256";
        case 0xC0B1:
            return "TLS_ECCPWD_WITH_AES_256_GCM_SHA384";
        case 0xC0B2:
            return "TLS_ECCPWD_WITH_AES_128_CCM_SHA256";
        case 0xC0B3:
            return "TLS_ECCPWD_WITH_AES_256_CCM_SHA384";
        case 0xC0B4:
            return "TLS_SHA256_SHA256";
        case 0xC0B5:
            return "TLS_SHA384_SHA384";
        case 0xC100:
            return "TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC";
        case 0xC101:
            return "TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC";
        case 0xC102:
            return "TLS_GOSTR341112_256_WITH_28147_CNT_IMIT";
        case 0xCCA8:
            return "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256";
        case 0xCCA9:
            return "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256";
        case 0xCCAA:
            return "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256";
        case 0xCCAB:
            return "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256";
        case 0xCCAC:
            return "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256";
        case 0xCCAD:
            return "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256";
        case 0xCCAE:
            return "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256";
        case 0xD001:
            return "TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256";
        case 0xD002:
            return "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384";
        case 0xD003:
            return "TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256";
        case 0xD005:
            return "TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256";
        default:
            return "Unknown";
    }
}

/**
 * Takes a number representing a suppored group registered with IANA, and returns
 * its corresponding discription
 * @param {number} input IANA Identifier
 * @return {string} String containing description of supported group
 */
export function supportedGroupLookup(input) {
    switch (input) {
        case 1:
            return "sect163k1";
        case 2:
            return "sect163r1";
        case 3:
            return "sect163r2";
        case 4:
            return "sect193r1";
        case 5:
            return "sect193r2";
        case 6:
            return "sect233k1";
        case 7:
            return "sect233r1";
        case 8:
            return "sect239k1";
        case 9:
            return "sect283k1";
        case 10:
            return "sect283r1";
        case 11:
            return "sect409k1";
        case 12:
            return "sect409r1";
        case 13:
            return "sect571k1";
        case 14:
            return "sect571r1";
        case 15:
            return "secp160k1";
        case 16:
            return "secp160r1";
        case 17:
            return "secp160r2";
        case 18:
            return "secp192k1";
        case 19:
            return "secp192r1";
        case 20:
            return "secp224k1";
        case 21:
            return "secp224r1";
        case 22:
            return "secp256k1";
        case 23:
            return "secp256r1";
        case 24:
            return "secp384r1";
        case 25:
            return "secp521r1";
        case 26:
            return "brainpoolP256r1";
        case 27:
            return "brainpoolP384r1";
        case 28:
            return "brainpoolP512r1";
        case 29:
            return "x25519";
        case 30:
            return "x448";
        case 31:
            return "brainpoolP256r1";
        case 32:
            return "brainpoolP384r1";
        case 33:
            return "brainpoolP512r1";
        case 34:
            return "GC256A";
        case 35:
            return "GC256B";
        case 36:
            return "GC256C";
        case 37:
            return "GC256D";
        case 38:
            return "GC512A";
        case 39:
            return "GC512B";
        case 40:
            return "GC512C";
        case 256:
            return "ffdhe2048";
        case 257:
            return "ffdhe3072";
        case 258:
            return "ffdhe4096";
        case 259:
            return "ffdhe6144";
        case 260:
            return "ffdhe8192";
        case 65281:
            return "arbitrary_explicit_prime_curves";
        case 65282:
            return "arbitrary_explicit_char2_curves";
    }
}

/**
 * Takes a number representing a signature algorithm registered with IANA, and returns
 * its corresponding discription
 * @param {number} input IANA Identifier
 * @return {string} String containing description of signature algorithm
 */
export function signatureAlgorithmLookup(input) {
    switch (input) {
        case 0x0000:
            return "anonymous";
        case 0x0001:
            return "rsa";
        case 0x0002:
            return "dsa";
        case 0x0003:
            return "ecdsa";
        case 0x0007:
            return "ed25519";
        case 0x0008:
            return "ed448";
        case 0x0040:
            return "gostr34102012_256";
        case 0x0041:
            return "gostr34102012_512";
        case 0x0201:
            return "rsa_pkcs1_sha1";
        case 0x0203:
            return "ecdsa_sha1";
        case 0x0401:
            return "rsa_pkcs1_sha256";
        case 0x0403:
            return "ecdsa_secp256r1_sha256";
        case 0x0501:
            return "rsa_pkcs1_sha384";
        case 0x0503:
            return "ecdsa_secp384r1_sha384";
        case 0x0601:
            return "rsa_pkcs1_sha512";
        case 0x0603:
            return "ecdsa_secp521r1_sha512";
        case 0x0704:
            return "eccsi_sha256";
        case 0x0705:
            return "iso_ibs1";
        case 0x0706:
            return "iso_ibs2";
        case 0x0707:
            return "iso_chinese_ibs";
        case 0x0804:
            return "rsa_pss_rsae_sha256";
        case 0x0805:
            return "rsa_pss_rsae_sha384";
        case 0x0806:
            return "rsa_pss_rsae_sha512";
        case 0x0807:
            return "ed25519";
        case 0x0808:
            return "ed448";
        case 0x0809:
            return "rsa_pss_pss_sha256";
        case 0x080A:
            return "rsa_pss_pss_sha384";
        case 0x080B:
            return "rsa_pss_pss_sha512";
        case 0x081A:
            return "ecdsa_brai";
        case 0x081B:
            return "ecdsa_brai";
        case 0x081C:
            return "ecdsa_brai";
        default:
            return "unknown";
    }
}

/**
 * Takes a number representing a PSK key exchange mode registered with IANA, and returns
 * its corresponding discription
 * @param {number} input IANA Identifier
 * @return {string} String containing description of PSK key exchange
 */
export function pskKeyExchangeModeLookup(input) {
    switch (input) {
        case 0x01:
            return "psk_ke";
        case 0x02:
            return "psk_dhe_ke";
        default:
            return "unknown";
    }
}

/**
 * Takes a number representing a compression method registered with IANA, and returns
 * its corresponding discription
 * @param {number} input IANA Identifier
 * @return {string} String containing description of compression method
 */
export function compressionMethodLookup(input) {
    switch (input) {
        case 0x00:
            return "NULL";
        case 0x01:
            return "DEFLATE";
        case 0x40:
            return "LZS";
        default:
            return "unknown";
    }
}

/**
 * Takes a number representing a TLS Version, and returns its corresponding description
 * @param {number} input version number
 * @return {string} String containing description of TLS version
 */
export function versionLookup(input) {
    switch (input) {
        case 0x03000:
            return "SSL 3.0";
        case 0x0301:
            return "TLS 1.0";
        case 0x0302:
            return "TLS 1.1";
        case 0x0303:
            return "TLS 1.2";
        case 0x0304:
            return "TLS 1.3";
        default:
            return "unknown";
    }
}

/**
 * Takes a number representing an EC Point Format, registered with IANA, and returns
 * its corresponding description
 * @param {number} input IANA Identifier
 * @return {string} String containing description of EC point format.
 */
export function ecPointFormatLookup(input) {
    switch (input) {
        case 0x00:
            return "uncompressed";
        case 0x01:
            return "ansiX962_compressed_prime";
        case 0x02:
            return "ansiX962_compressed_char2";
        default:
            return "unknown";
    }
}
